from aiogram import F, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f


from filtres.chat_types import ChatTypeFilter

from kbds import reply

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer('–Ω–∞—á–Ω–µ–º',
                         reply_markup=reply.start_kb3.as_markup(
                             resize_keyboard=True,
                         input_field_placeholder="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"))

@user_private_router.message((F.text.lower().contains('–¥—Ä—É–∑')) | (F.lower() == '—Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π'))
@user_private_router.message(Command('list'))
async def list_cmds(message: types.Message):
    await message.answer('–ê—Ä—Ç—ë–º üëΩ\n–ê—à–æ—Ç üéÆ\n–í–∞–¥–∏–º üö¨\n–î–∏–º–∞ üêê\n–ú–∞—Ç–≤–µ–π üíÄ\n–ù–∏–∫–∏—Ç–∞ ü§ñ\n–ü–∞—à–∞ ü•∂\n–°—Ç—ë–ø–∞ üöΩ')

@user_private_router.message(or_f(Command('height'), (F.text.lower() == '—Ä–æ—Å—Ç'), (F.text.lower().contains('—Ä–æ—Å—Ç'))))
async def menu_cmd(message: types.Message):
    await message.answer("—Ä–æ—Å—Ç...")

@user_private_router.message(F.text.lower() == '–≤–µ—Å')
@user_private_router.message(Command('weight'))
async def weight_cmd(message: types.Message):
    await message.answer("–≤–µ—Å....")

@user_private_router.message(or_f(Command('age'), (F.text.lower() == '–∫–æ–ª-–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç'), (F.text.lower().contains('–ª–µ—Ç'))))
async def menu_cmd(message: types.Message):
    await message.answer("–µ–º—É ..... –ª–µ—Ç")

@user_private_router.message(or_f(Command('zodiac'), (F.text.lower() == '–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞'), (F.text.lower().contains('–∑–æ–¥–∏–∞–∫'))))
async def menu_cmd(message: types.Message):
    await message.answer("–µ–≥–æ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ...")

@user_private_router.message(or_f(Command('data'), (F.text.lower() == '–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'), (F.text.lower().contains('—Ä–æ–∂–¥–µ–Ω'))))
async def menu_cmd(message: types.Message):
    await message.answer("–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ...")

@user_private_router.message(or_f(Command('color'), (F.text.lower() == '–ª—é–±–∏–º–º—ã–π —Ü–≤–µ—Ç'), (F.text.lower().contains('—Ü–≤–µ—Ç'))))
async def menu_cmd(message: types.Message):
    await message.answer("–µ–≥–æ –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç ...")

@user_private_router.message(or_f(Command('anime'), (F.text.lower() == '–ª—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ'), (F.text.lower().contains('–∞–Ω–∏–º–µ'))))
async def menu_cmd(message: types.Message):
    await message.answer("–µ–≥–æ –ª—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ...")

@user_private_router.message(or_f(Command('name'), (F.text.lower() == '–ø–æ–ª–Ω–æ–µ –∏–º—è'), (F.text.lower().contains('–∏–º—è'))))
async def menu_cmd(message: types.Message):
    await message.answer("–µ–≥–æ –ø–æ–ª–Ω–æ–µ –∏–º—è")

@user_private_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer(f"–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω")
    await message.answer(str(message.contact))

@user_private_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer(f"–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))




#lower() –ø–µ—Ä–≤–æ–¥–∏—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä  #contains() —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –≤—ã–¥–µ–ª–∏–ª
#reply_markup=reply.del_kbd —É–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —è –Ω–∞–∂–∏–º–∞—é –Ω–∞ –∫–Ω–æ–ø–∫—É "–ª–µ—Ç"
#@user_private_router.message()
    #async def filter_cmd(message: types.Message):
        #await message.answer(message.text)

# –≤–Ω—É—Ç—Ä–∏ —Ö–µ–Ω–¥–ª–ª–µ—Ä–∞ –º–æ–∂–Ω–æ —Å–æ—á–µ—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –ø–æ–º–æ–º–æ—â–∏ &(–∏),|(–∏–ª–∏), –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫

# F. (...) | (...) —Ç–æ–∂–µ —Å–∞–º–æ–µ —Å –∏(&)
